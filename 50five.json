[
    {
        "id": "632f0e246544e623",
        "type": "subflow",
        "name": "50five",
        "info": "## About this subflow\n\nThis subflow will control 50five (fka. Shell Recharge or Newmotion) car charging equipment.\n\n## Getting started\n\nDrag the 50five node into a flow.\n\nDouble-click on the new node.\n\nUsing the credentials used to login to the 50five website, enter the username and password into the respective fields of the `Edit subflow instance: <xxx>` box which appears.\n\nTo find suitable values for _Charger ID_ and _Card ID_, send a payload (using an inject node, for example) to **_Input_** containing:\n\n> msg.payload = { \"action\": \"setup\" }\n\n<img width=\"438\" alt=\"Data\" src=\"https://user-images.githubusercontent.com/2021563/221404599-3fc7cf22-d4d2-4f6d-a7b0-1c2da7774fa2.png\">\n\nInspect the output (by connecting a debug node to the **_Debug_** output). Find your charger and RFID token card/keyfob details in this- these match the information shown on the Shell Recharge website. The array index for _msg.payload.chargePoints_ and _msg.payload.chargeTokens_ (highlighted by the red circles in the image above) should be entered in the configuration fields _Charger ID_ and _Card ID_ respectively. _These will be a number, usually `0`._\n\n> __Warning__ \n>\n> Card ID and Charger ID must only contain a number derived from the process above. Do not enter the charge card number as printed on a key fob/RFID token card or charge point serial number.\n>\n> <img width=\"493\" alt=\"Screenshot 2023-02-26 at 11 15 27\" src=\"https://user-images.githubusercontent.com/2021563/221416402-dcf6de7b-a260-4730-b201-865174e37598.png\">\n\n## Inputs\n\n> msg.payload = { \"action\": \"_ACTION_\" }\n\n...where _ACTION_ is:\n\n**start** and **stop**\n\nStart or stop a charging session using the configured charger and RFID card/token.\n\nOverride the node settings for _Charger ID ('cid')_ and _Card ID ('tid')_ with:\n\n> msg.payload = { \"action\": \"start\", \"cid\": _\\<number\\>_, \"tid\": _\\<number\\>_ }\n\nAdd a random delay (between 0 and 5 minutes) to the start of a charge with:\n\n> msg.payload = { \"action\": \"start\", \"delay\": true }\n\n**reset**\n\nReset the charging equipment.\n\n**poll**\n\nPoll the charging equipment once for status information: this gives details directly from Shell Recharge like _'Charging'_ and _'Occupied'_. \n\n> msg.payload = { \"action\": \"poll\" }\n\n**rpoll** and **nopoll**\n\nRepeatedly poll the charging equipment for status information.\n\nThe polling interval (in seconds) can be set in (number) _msg.rpoll.interval_ and the duration (in seconds) can be set in (number) _msg.rpoll.duration_, for example:\n\n> msg.payload = { \"action\": \"rpoll\", \"poll\": {\"interval\": 5, \"duration\": 20 } }\n\nThis would poll every 5 seconds for 20 seconds.\n\nStop polling with _nopoll_.\n\nAfter _start_, _stop_ and _reset_, polling will automatically run every 20 seconds for 120 seconds.\n\n**energy**\n\nGet energy consumption information.\n\nThe start time is set in (number) _msg.range.start_ and the end time is set in (number) _msg.range.end_, both in Unix timestamp format, for example:\n\n> msg.payload = { \"action\": \"energy\", \"range\": {\"start\": 1692054000000, \"end\": 1694645999999 } }\n\n**expire**\n\nDelete the current Shell Recharge API token. This will force a login attempt during the next interaction with Shell Recharge.\n\n**flush**\n\nDelete the current Shell Recharge API token, session and cache (which stores account details like chargers and token cards).\n\n**dump**\n\nShow the internal cache.\n\n## Outputs\n\nThe **_Output_** payload is _(boolean) true_ if a charge is in progress, otherwise it is _(boolean) false_. This is also updated when polling is in progress. All other output is from **_Debug_** labelled with topics like _status_, _poll_, _response_, _energy_ and _error_.\n\n## Problems\n\n_HTTP Error [401:x]_\n\nThis means 'Unauthorised'. Check your username and password, or try _expire_.\n\n_HTTP Error [409:x]_\n\n``\"The HTTP 409 Conflict response status code indicates a request conflict with the current state of the target resource.\"`` In the context of Shell Recharge, this probably means you're trying to start a charge while the system is in the process of stopping a session, or maybe resetting. Wait, then try again.\n\n_\"TypeError: Cannot read properties of undefined (reading '[evses|uuid]')\"_\n\nDo not enter the value of `uuid` or `rfid` given the `{\"action\":\"setup\"}` process into the `Edit subflow instance: <xxx>` section. `Charger ID` and `Card ID` should be a number, usually `0`.\n\nOtherwise, get in touch.\n\n## Contact\n\nvia [Github](https://github.com/dgthomson/nodered-shellrecharge)",
        "category": "",
        "in": [
            {
                "x": 20,
                "y": 320,
                "wires": [
                    {
                        "id": "512ddb118df0498e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 900,
                "y": 820,
                "wires": [
                    {
                        "id": "76753c7b60958521",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "username",
                "type": "str",
                "value": "nobody@hotmail.com",
                "ui": {
                    "icon": "font-awesome/fa-user-circle-o",
                    "label": {
                        "en-US": "Username"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "password",
                "type": "cred",
                "ui": {
                    "icon": "font-awesome/fa-unlock-alt",
                    "label": {
                        "en-US": "Password"
                    }
                }
            },
            {
                "name": "deviceid",
                "type": "num",
                "value": "1234567890",
                "ui": {
                    "icon": "font-awesome/fa-plug",
                    "label": {
                        "en-US": "Device ID"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "userid",
                "type": "num",
                "value": "123456",
                "ui": {
                    "icon": "font-awesome/fa-child",
                    "label": {
                        "en-US": "User ID"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "cardid",
                "type": "str",
                "value": "NL505C12345678",
                "ui": {
                    "icon": "font-awesome/fa-id-card-o",
                    "label": {
                        "en-US": "Card ID"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "channelid",
                "type": "num",
                "value": "1",
                "ui": {
                    "icon": "font-awesome/fa-cc",
                    "label": {
                        "en-US": "Channel ID"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "50five",
            "type": "dgt.nodered.35e.shellrecharge",
            "version": "0.0.1 (2025-07-24)",
            "author": "Nika Gerson Lohman <nikagl@gmail.com>",
            "desc": "Nodered subflow to control 50five charging equipment.",
            "keywords": "shell,recharge,shell recharge,new,motion,newmotion,evse,charge,50five",
            "license": "GPL-3.0"
        },
        "color": "#0097A9",
        "icon": "font-awesome/fa-plug"
    },
    {
        "id": "dea30d9836107962",
        "type": "http request",
        "z": "632f0e246544e623",
        "name": "Start Charging",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 620,
        "y": 660,
        "wires": [
            [
                "5168632a92864628",
                "0a6fd6320caefacd"
            ]
        ]
    },
    {
        "id": "9f483c9d74c482ee",
        "type": "function",
        "z": "632f0e246544e623",
        "name": "Build URL Start Charging",
        "func": "var deviceid = flow.get('deviceid');\nvar userid = flow.get('userid');\nvar cardid = flow.get('cardid');\nvar channelid = flow.get('channelid');\n\nmsg.url = 'https://50five-snl.evc-net.com/api/ajax?requests=%7B%220%22%3A%7B%22handler%22%3A%22%5C%5CLMS%5C%5CEV%5C%5CAsyncServices%5C%5CRechargeSpotsAsyncService%22%2C%22method%22%3A%22action%22%2C%22params%22%3A%7B%22action%22%3A%22StartTransaction%22%2C%22rechargeSpotId%22%3A%22' + deviceid + '%22%2C%22clickedButtonId%22%3A0%2C%22channel%22%3A%220%22%2C%22customer%22%3A%22' + userid + '%22%2C%22card%22%3A%22' + cardid + '%22%7D%7D%7D&metricKey=RechargeSpotDashboard_1021';\nmsg.method = \"POST\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 660,
        "wires": [
            [
                "dea30d9836107962"
            ]
        ]
    },
    {
        "id": "b07a5bdbd77e1ba6",
        "type": "function",
        "z": "632f0e246544e623",
        "name": "Set Cookies Header",
        "func": "// Get cookies from flow context\nvar phpsessid = flow.get('PHPSESSID');\nvar serverid = flow.get('SERVERID');\nif (phpsessid && serverid) {\n    msg.headers = msg.headers || {};\n    msg.headers['Cookie'] = `PHPSESSID=${phpsessid}; SERVERID=${serverid}`;\n} else {\n    msg.headers = msg.headers || {};\n    msg.headers['Cookie'] = '';\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 440,
        "wires": [
            [
                "4406fbdfa52d73aa"
            ]
        ]
    },
    {
        "id": "523b41476b60f399",
        "type": "http request",
        "z": "632f0e246544e623",
        "name": "Get Device ID",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 820,
        "y": 440,
        "wires": [
            [
                "345cf7bb6ddbf954"
            ]
        ]
    },
    {
        "id": "d5856c0b80fac5db",
        "type": "function",
        "z": "632f0e246544e623",
        "name": "Set Cookies Header",
        "func": "// Get cookies from flow context\nvar phpsessid = flow.get('PHPSESSID');\nvar serverid = flow.get('SERVERID');\nif (phpsessid && serverid) {\n    msg.headers = msg.headers || {};\n    msg.headers['Cookie'] = `PHPSESSID=${phpsessid}; SERVERID=${serverid}`;\n} else {\n    msg.headers = msg.headers || {};\n    msg.headers['Cookie'] = '';\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 480,
        "wires": [
            [
                "ef05409274d1d043"
            ]
        ]
    },
    {
        "id": "07081e47e4daa227",
        "type": "http request",
        "z": "632f0e246544e623",
        "name": "Get Channel ID",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 820,
        "y": 480,
        "wires": [
            [
                "951d78944e6dc44d"
            ]
        ]
    },
    {
        "id": "5915399cc96c04f9",
        "type": "function",
        "z": "632f0e246544e623",
        "name": "Set Cookies Header",
        "func": "// Get cookies from flow context\nvar phpsessid = flow.get('PHPSESSID');\nvar serverid = flow.get('SERVERID');\nif (phpsessid && serverid) {\n    msg.headers = msg.headers || {};\n    msg.headers['Cookie'] = `PHPSESSID=${phpsessid}; SERVERID=${serverid}`;\n} else {\n    msg.headers = msg.headers || {};\n    msg.headers['Cookie'] = '';\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 520,
        "wires": [
            [
                "84d26344abcda97e"
            ]
        ]
    },
    {
        "id": "8c42a7e4b5d4cf9a",
        "type": "http request",
        "z": "632f0e246544e623",
        "name": "Get User ID",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 520,
        "wires": [
            [
                "b0b4b1bf863ece14"
            ]
        ]
    },
    {
        "id": "59f6c2b21b1e45b2",
        "type": "function",
        "z": "632f0e246544e623",
        "name": "Set Cookies Header",
        "func": "// Get cookies from flow context\nvar phpsessid = flow.get('PHPSESSID');\nvar serverid = flow.get('SERVERID');\nif (phpsessid && serverid) {\n    msg.headers = msg.headers || {};\n    msg.headers['Cookie'] = `PHPSESSID=${phpsessid}; SERVERID=${serverid}`;\n} else {\n    msg.headers = msg.headers || {};\n    msg.headers['Cookie'] = '';\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 560,
        "wires": [
            [
                "d674776649886c8b"
            ]
        ]
    },
    {
        "id": "b47fe5cb002dd1a5",
        "type": "http request",
        "z": "632f0e246544e623",
        "name": "Get Card ID",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 560,
        "wires": [
            [
                "91ae799d0660b2dc"
            ]
        ]
    },
    {
        "id": "b40722cc0217295f",
        "type": "function",
        "z": "632f0e246544e623",
        "name": "Set Cookies Header",
        "func": "// Get cookies from flow context\nvar phpsessid = flow.get('PHPSESSID');\nvar serverid = flow.get('SERVERID');\nif (phpsessid && serverid) {\n    msg.headers = msg.headers || {};\n    msg.headers['Cookie'] = `PHPSESSID=${phpsessid}; SERVERID=${serverid}`;\n} else {\n    msg.headers = msg.headers || {};\n    msg.headers['Cookie'] = '';\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 600,
        "wires": [
            [
                "575aea9516f7c905"
            ]
        ]
    },
    {
        "id": "a4347add53151e88",
        "type": "http request",
        "z": "632f0e246544e623",
        "name": "Stop Charging",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 620,
        "y": 700,
        "wires": [
            [
                "5168632a92864628",
                "0a6fd6320caefacd"
            ]
        ]
    },
    {
        "id": "345cf7bb6ddbf954",
        "type": "function",
        "z": "632f0e246544e623",
        "name": "Extract Device ID",
        "func": "var payload = msg.payload;\n\n// If payload is a string, parse it\nif (typeof payload === \"string\") {\n    payload = JSON.parse(payload);\n}\n\nvar deviceid = payload[0][0].IDX;\n\nflow.set('deviceid', deviceid);\nmsg.deviceid = deviceid;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 440,
        "wires": [
            [
                "5168632a92864628",
                "d5856c0b80fac5db"
            ]
        ]
    },
    {
        "id": "951d78944e6dc44d",
        "type": "function",
        "z": "632f0e246544e623",
        "name": "Extract Channel ID",
        "func": "var payload = msg.payload;\n\n// If payload is a string, parse it\nif (typeof payload === \"string\") {\n    payload = JSON.parse(payload);\n}\n\nvar channelid = payload[0][0].CHANNEL;\n\nflow.set('channelid', channelid);\nmsg.channelid = channelid;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 480,
        "wires": [
            [
                "5915399cc96c04f9",
                "5168632a92864628"
            ]
        ]
    },
    {
        "id": "b0b4b1bf863ece14",
        "type": "function",
        "z": "632f0e246544e623",
        "name": "Extract User ID",
        "func": "var payload = msg.payload;\n\n// If payload is a string, parse it\nif (typeof payload === \"string\") {\n    payload = JSON.parse(payload);\n}\n\nvar userid = payload[0][0].id;\n\nflow.set('userid', userid);\nmsg.userid = userid;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 520,
        "wires": [
            [
                "59f6c2b21b1e45b2",
                "5168632a92864628"
            ]
        ]
    },
    {
        "id": "91ae799d0660b2dc",
        "type": "function",
        "z": "632f0e246544e623",
        "name": "Extract Card ID",
        "func": "var payload = msg.payload;\n\n// If payload is a string, parse it\nif (typeof payload === \"string\") {\n    payload = JSON.parse(payload);\n}\n\n// Warning: in my case it's the second card, therefore [1]\nvar cardid = payload[0][1].id;\n\nflow.set('cardid', cardid);\nmsg.cardid = cardid;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 560,
        "wires": [
            [
                "b40722cc0217295f",
                "5168632a92864628"
            ]
        ]
    },
    {
        "id": "5c84401b008dc81a",
        "type": "function",
        "z": "632f0e246544e623",
        "name": "Build URL Stop Charging",
        "func": "var deviceid = flow.get('deviceid');\nvar userid = flow.get('userid');\nvar cardid = flow.get('cardid');\nvar channelid = flow.get('channelid');\n\nmsg.url = 'https://50five-snl.evc-net.com/api/ajax?requests=%7B%220%22%3A%7B%22handler%22%3A%22%5C%5CLMS%5C%5CEV%5C%5CAsyncServices%5C%5CRechargeSpotsAsyncService%22%2C%22method%22%3A%22action%22%2C%22params%22%3A%7B%22action%22%3A%22StopTransaction%22%2C%22rechargeSpotId%22%3A%22' + deviceid + '%22%2C%22clickedButtonId%22%3A0%2C%22channel%22%3A%22' + channelid + '%22%7D%7D%7D&metricKey=RechargeSpotDashboard_1021';\nmsg.method = \"POST\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 700,
        "wires": [
            [
                "a4347add53151e88"
            ]
        ]
    },
    {
        "id": "4406fbdfa52d73aa",
        "type": "switch",
        "z": "632f0e246544e623",
        "name": "Check login",
        "property": "headers['Cookie']",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "empty"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 490,
        "y": 380,
        "wires": [
            [
                "374c7ce6aaafe95b",
                "5168632a92864628"
            ],
            [
                "374c7ce6aaafe95b",
                "5168632a92864628"
            ],
            [
                "5168632a92864628",
                "d459327c74fc9eb8"
            ]
        ]
    },
    {
        "id": "512ddb118df0498e",
        "type": "switch",
        "z": "632f0e246544e623",
        "name": "",
        "property": "50five.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "login",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "start",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "stop",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "reset",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "poll",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 65,
        "y": 320,
        "wires": [
            [
                "374c7ce6aaafe95b"
            ],
            [
                "48b2e1616e463611"
            ],
            [
                "fa5f77cd0f8102ba"
            ],
            [
                "3b70c141ce8cc80f"
            ],
            [
                "51523047f9335623"
            ]
        ],
        "l": false
    },
    {
        "id": "fbd90f3aed62cd03",
        "type": "link in",
        "z": "632f0e246544e623",
        "name": "Authenticate",
        "links": [],
        "x": 405,
        "y": 20,
        "wires": [
            [
                "4a35fc433416383e",
                "5168632a92864628"
            ]
        ]
    },
    {
        "id": "e35240edb3f26485",
        "type": "comment",
        "z": "632f0e246544e623",
        "name": "Authenticate",
        "info": "",
        "x": 310,
        "y": 20,
        "wires": []
    },
    {
        "id": "6efad923fe8b4e5f",
        "type": "function",
        "z": "632f0e246544e623",
        "name": "Login with Retry",
        "func": "var retries = msg.max_retries || 3;\nvar attempt = msg.attempt || 1;\n\nlet username = msg.username || env.get(\"LOGIN_USERNAME\") || flow.get(\"LOGIN_USERNAME\") || \"USERNAME\";\nlet password = msg.password || env.get(\"LOGIN_PASSWORD\") || flow.get(\"LOGIN_PASSWORD\") || \"PASSWORD\";\n\nmsg.url = 'https://50five-snl.evc-net.com/Login/Login';\nmsg.headers = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n    \"User-Agent\": \"Mozilla/5.0\",\n    \"Referer\": \"https://50five-snl.evc-net.com/Login/Login\"\n};\nmsg.method = \"POST\";\nmsg.payload = `emailField=${encodeURIComponent(username)}`;\nmsg.payload += `&passwordField=${encodeURIComponent(password)}`;\nmsg.attempt = attempt;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 100,
        "wires": [
            [
                "f6763d53afe53508",
                "5168632a92864628"
            ]
        ]
    },
    {
        "id": "f6763d53afe53508",
        "type": "http request",
        "z": "632f0e246544e623",
        "name": "POST Login",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 310,
        "y": 140,
        "wires": [
            [
                "104b8a03759c9970",
                "5168632a92864628"
            ]
        ]
    },
    {
        "id": "104b8a03759c9970",
        "type": "function",
        "z": "632f0e246544e623",
        "name": "Check Login Success",
        "func": "// Check for login success by inspecting HTML\nvar cookies = msg.responseCookies || {};\nvar phpsessid = cookies.PHPSESSID ? cookies.PHPSESSID.value : null;\nvar serverid = cookies.SERVERID ? cookies.SERVERID.value : null;\nvar html = msg.payload || '';\n\nmsg.attempt += 1;\nif (html.indexOf('signed-out') === -1 && phpsessid && serverid) {\n    // Success: store cookies\n    flow.set('PHPSESSID', phpsessid);\n    flow.set('SERVERID', serverid);\n    msg.payload = 'Login successful';\n    return [msg, null];\n} else if (msg.attempt < msg.retries) {\n    // Retry\n    return [null, msg];\n} else {\n    msg.payload = 'Login failed after ' + msg.retries + ' attempts';\n    return [msg, null];\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 180,
        "wires": [
            [
                "81891e9a5efbcf8b",
                "5168632a92864628"
            ],
            [
                "b145d5db72fa677a"
            ]
        ]
    },
    {
        "id": "b145d5db72fa677a",
        "type": "delay",
        "z": "632f0e246544e623",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 100,
        "y": 180,
        "wires": [
            [
                "6efad923fe8b4e5f"
            ]
        ]
    },
    {
        "id": "4a35fc433416383e",
        "type": "change",
        "z": "632f0e246544e623",
        "name": "Get Username and Password + Max Retries",
        "rules": [
            {
                "t": "set",
                "p": "username",
                "pt": "msg",
                "to": "username",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "password",
                "pt": "msg",
                "to": "password",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "max_retries",
                "pt": "msg",
                "to": "3",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 60,
        "wires": [
            [
                "6efad923fe8b4e5f",
                "5168632a92864628"
            ]
        ]
    },
    {
        "id": "fa5f77cd0f8102ba",
        "type": "link call",
        "z": "632f0e246544e623",
        "name": "Get props",
        "links": [
            "1f53bf1285478acf"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 700,
        "wires": [
            [
                "5c84401b008dc81a"
            ]
        ]
    },
    {
        "id": "1f53bf1285478acf",
        "type": "link in",
        "z": "632f0e246544e623",
        "name": "Get props",
        "links": [],
        "x": 175,
        "y": 440,
        "wires": [
            [
                "b07a5bdbd77e1ba6"
            ]
        ]
    },
    {
        "id": "48b2e1616e463611",
        "type": "link call",
        "z": "632f0e246544e623",
        "name": "Get props",
        "links": [
            "1f53bf1285478acf"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 660,
        "wires": [
            [
                "9f483c9d74c482ee"
            ]
        ]
    },
    {
        "id": "95d2381bb791e588",
        "type": "comment",
        "z": "632f0e246544e623",
        "name": "Get props",
        "info": "",
        "x": 220,
        "y": 400,
        "wires": []
    },
    {
        "id": "5168632a92864628",
        "type": "debug",
        "z": "632f0e246544e623",
        "d": true,
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 20,
        "wires": []
    },
    {
        "id": "575aea9516f7c905",
        "type": "link out",
        "z": "632f0e246544e623",
        "name": "link out 1",
        "mode": "return",
        "links": [],
        "x": 495,
        "y": 600,
        "wires": []
    },
    {
        "id": "81891e9a5efbcf8b",
        "type": "link out",
        "z": "632f0e246544e623",
        "name": "link out 2",
        "mode": "return",
        "links": [],
        "x": 495,
        "y": 160,
        "wires": []
    },
    {
        "id": "374c7ce6aaafe95b",
        "type": "link call",
        "z": "632f0e246544e623",
        "name": "",
        "links": [
            "fbd90f3aed62cd03"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 430,
        "y": 280,
        "wires": [
            [
                "63715bc4396373f6"
            ]
        ]
    },
    {
        "id": "63715bc4396373f6",
        "type": "switch",
        "z": "632f0e246544e623",
        "name": "",
        "property": "50five.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "login",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "login",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 535,
        "y": 280,
        "wires": [
            [
                "5168632a92864628"
            ],
            [
                "8e146feb37bbe30c"
            ]
        ],
        "l": false
    },
    {
        "id": "8e146feb37bbe30c",
        "type": "switch",
        "z": "632f0e246544e623",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "Login successful",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Login successful",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 605,
        "y": 280,
        "wires": [
            [
                "d8305ae62822d258"
            ],
            [
                "4406fbdfa52d73aa"
            ]
        ],
        "l": false
    },
    {
        "id": "d8305ae62822d258",
        "type": "debug",
        "z": "632f0e246544e623",
        "name": "ERROR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 60,
        "wires": []
    },
    {
        "id": "9159bc8f8fe59ddd",
        "type": "http request",
        "z": "632f0e246544e623",
        "name": "Soft Reset",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 740,
        "wires": [
            [
                "5168632a92864628",
                "0a6fd6320caefacd"
            ]
        ]
    },
    {
        "id": "98dc9c902aa40d0a",
        "type": "function",
        "z": "632f0e246544e623",
        "name": "Build URL Soft Reset",
        "func": "var deviceid = flow.get('deviceid');\nvar userid = flow.get('userid');\nvar cardid = flow.get('cardid');\nvar channelid = flow.get('channelid');\n\nmsg.url = 'https://50five-snl.evc-net.com/api/ajax?requests=%7B%220%22%3A%7B%22handler%22%3A%22%5C%5CLMS%5C%5CEV%5C%5CAsyncServices%5C%5CRechargeSpotsAsyncService%22%2C%22method%22%3A%22action%22%2C%22params%22%3A%7B%22action%22%3A%22SoftReset%22%2C%22rechargeSpotId%22%3A%22' + deviceid + '%22%2C%22clickedButtonId%22%3A1%7D%7D%7D&metricKey=RechargeSpotDashboard_1021';\nmsg.method = \"POST\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 740,
        "wires": [
            [
                "9159bc8f8fe59ddd"
            ]
        ]
    },
    {
        "id": "3b70c141ce8cc80f",
        "type": "link call",
        "z": "632f0e246544e623",
        "name": "Get props",
        "links": [
            "1f53bf1285478acf"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 740,
        "wires": [
            [
                "98dc9c902aa40d0a"
            ]
        ]
    },
    {
        "id": "3a309e1c760e55df",
        "type": "http request",
        "z": "632f0e246544e623",
        "name": "Get Status",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 820,
        "wires": [
            [
                "5168632a92864628",
                "76753c7b60958521"
            ]
        ]
    },
    {
        "id": "93554278bdc8a3bc",
        "type": "function",
        "z": "632f0e246544e623",
        "name": "Build URL Get Status",
        "func": "var deviceid = flow.get('deviceid');\nvar userid = flow.get('userid');\nvar cardid = flow.get('cardid');\nvar channelid = flow.get('channelid');\n\nmsg.url = 'https://50five-snl.evc-net.com/api/ajax?requests=%7B%220%22%3A%7B%22handler%22%3A%22%5C%5CLMS%5C%5CEV%5C%5CAsyncServices%5C%5CRechargeSpotsAsyncService%22%2C%22method%22%3A%22overview%22%2C%22params%22%3A%7B%22rechargeSpotId%22%3A%22' + deviceid + '%22%7D%7D%7D&metricKey=RechargeSpotDashboard_149';\nmsg.method = \"POST\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 820,
        "wires": [
            [
                "3a309e1c760e55df"
            ]
        ]
    },
    {
        "id": "51523047f9335623",
        "type": "link call",
        "z": "632f0e246544e623",
        "name": "Get props",
        "links": [
            "1f53bf1285478acf"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 820,
        "wires": [
            [
                "93554278bdc8a3bc"
            ]
        ]
    },
    {
        "id": "76753c7b60958521",
        "type": "function",
        "z": "632f0e246544e623",
        "name": "Extract Status",
        "func": "var payload = msg.payload;\n\n// If payload is a string, parse it\nif (typeof payload === \"string\") {\n    payload = JSON.parse(payload);\n}\n\nvar status = payload[0][0].NOTIFICATION;\nmsg.status = status;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "0a6fd6320caefacd",
        "type": "delay",
        "z": "632f0e246544e623",
        "name": "",
        "pauseType": "delay",
        "timeout": "7",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 840,
        "y": 740,
        "wires": [
            [
                "51523047f9335623"
            ]
        ]
    },
    {
        "id": "d459327c74fc9eb8",
        "type": "function",
        "z": "632f0e246544e623",
        "name": "Build URL Device ID",
        "func": "msg.url = 'https://50five-snl.evc-net.com/api/ajax?requests=%7B%220%22%3A%7B%22handler%22%3A%22%5C%5CLMS%5C%5CEV%5C%5CAsyncServices%5C%5CDashboardAsyncService%22%2C%22method%22%3A%22networkOverview%22%2C%22params%22%3A%7B%22mode%22%3A%22id%22%7D%7D%7D&metricKey=EndUserRechargeSpotListView_99';\nmsg.method = \"POST\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 440,
        "wires": [
            [
                "523b41476b60f399"
            ]
        ]
    },
    {
        "id": "ef05409274d1d043",
        "type": "function",
        "z": "632f0e246544e623",
        "name": "Build URL Channel ID",
        "func": "var deviceid = flow.get('deviceid');\nvar userid = flow.get('userid');\nvar cardid = flow.get('cardid');\nvar channelid = flow.get('channelid');\n\nmsg.url = 'https://50five-snl.evc-net.com/api/ajax?requests=%7B%220%22%3A%7B%22handler%22%3A%22%5C%5CLMS%5C%5CEV%5C%5CAsyncServices%5C%5CRechargeSpotsAsyncService%22%2C%22method%22%3A%22overview%22%2C%22params%22%3A%7B%22rechargeSpotId%22%3A%22' + deviceid + '%22%7D%7D%7D&metricKey=RechargeSpotDashboard_149';\nmsg.method = \"POST\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 480,
        "wires": [
            [
                "07081e47e4daa227"
            ]
        ]
    },
    {
        "id": "84d26344abcda97e",
        "type": "function",
        "z": "632f0e246544e623",
        "name": "Build URL User ID",
        "func": "var deviceid = flow.get('deviceid');\nvar userid = flow.get('userid');\nvar cardid = flow.get('cardid');\nvar channelid = flow.get('channelid');\n\nmsg.url = 'https://50five-snl.evc-net.com/api/ajax?requests=%7B%220%22%3A%7B%22handler%22%3A%22%5C%5CLMS%5C%5CEV%5C%5CAsyncServices%5C%5CRechargeSpotsAsyncService%22%2C%22method%22%3A%22userAccess%22%2C%22params%22%3A%7B%22rechargeSpotId%22%3A%22' + deviceid + '%22%2C%22input%22%3A%22%22%7D%7D%7D&metricKey=RechargeSpotDashboard_642';\nmsg.method = \"POST\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 520,
        "wires": [
            [
                "8c42a7e4b5d4cf9a"
            ]
        ]
    },
    {
        "id": "d674776649886c8b",
        "type": "function",
        "z": "632f0e246544e623",
        "name": "Build URL Card ID",
        "func": "var deviceid = flow.get('deviceid');\nvar userid = flow.get('userid');\nvar cardid = flow.get('cardid');\nvar channelid = flow.get('channelid');\n\nmsg.url = 'https://50five-snl.evc-net.com/api/ajax?requests=%7B%220%22%3A%7B%22handler%22%3A%22%5C%5CLMS%5C%5CEV%5C%5CAsyncServices%5C%5CRechargeSpotsAsyncService%22%2C%22method%22%3A%22cardAccess%22%2C%22params%22%3A%7B%22rechargeSpotId%22%3A%22' + deviceid + '%22%2C%22customerId%22%3A%22' + userid + '%22%7D%7D%7D&metricKey=RechargeSpotDashboard_688';\nmsg.method = \"POST\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 560,
        "wires": [
            [
                "b47fe5cb002dd1a5"
            ]
        ]
    },
    {
        "id": "837fdef5c775d406",
        "type": "tab",
        "label": "50five",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e8f8257ca9ba7d13",
        "type": "subflow:632f0e246544e623",
        "z": "837fdef5c775d406",
        "name": "50five",
        "env": [
            {
                "name": "username",
                "value": "username@gmail.com",
                "type": "str"
            },
            {
                "name": "password",
                "type": "cred"
            },
            {
                "name": "deviceid",
                "value": "1234567890",
                "type": "num"
            },
            {
                "name": "userid",
                "value": "123456",
                "type": "num"
            },
            {
                "name": "cardid",
                "value": "NL505C12345678",
                "type": "str"
            }
        ],
        "x": 590,
        "y": 240,
        "wires": [
            [
                "abacac7dac80f615"
            ]
        ]
    },
    {
        "id": "3bb2400b473a86ba",
        "type": "ha-switch",
        "z": "837fdef5c775d406",
        "name": "Laden",
        "version": 0,
        "debugenabled": false,
        "inputs": 0,
        "outputs": 2,
        "entityConfig": "39d637221fc977c3",
        "enableInput": false,
        "outputOnStateChange": true,
        "outputProperties": [
            {
                "property": "50five.action",
                "propertyType": "msg",
                "value": "poll",
                "valueType": "str"
            }
        ],
        "x": 90,
        "y": 520,
        "wires": [
            [
                "e8f8257ca9ba7d13"
            ],
            [
                "e8f8257ca9ba7d13"
            ]
        ]
    },
    {
        "id": "521a7eee4b8dd278",
        "type": "ha-button",
        "z": "837fdef5c775d406",
        "name": "Reset",
        "version": 0,
        "debugenabled": false,
        "outputs": 1,
        "entityConfig": "4852bdbdaf30826e",
        "outputProperties": [
            {
                "property": "50five.action",
                "propertyType": "msg",
                "value": "reset",
                "valueType": "str"
            }
        ],
        "x": 90,
        "y": 440,
        "wires": [
            [
                "e8f8257ca9ba7d13"
            ]
        ]
    },
    {
        "id": "8a9442817a889cd3",
        "type": "ha-button",
        "z": "837fdef5c775d406",
        "name": "Poll",
        "version": 0,
        "debugenabled": false,
        "outputs": 1,
        "entityConfig": "23ca43b95da66b78",
        "outputProperties": [
            {
                "property": "50five.action",
                "propertyType": "msg",
                "value": "poll",
                "valueType": "str"
            }
        ],
        "x": 90,
        "y": 340,
        "wires": [
            [
                "e8f8257ca9ba7d13"
            ]
        ]
    },
    {
        "id": "abacac7dac80f615",
        "type": "ha-sensor",
        "z": "837fdef5c775d406",
        "name": "Laadpaal Status",
        "entityConfig": "7eca8bfdf57ade1d",
        "version": 0,
        "state": "msg.status & ' ' & $now('[H#1]:[m01]','+0200')",
        "stateType": "jsonata",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 820,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "96511b305dbbd363",
        "type": "inject",
        "z": "837fdef5c775d406",
        "name": "Start Login",
        "props": [
            {
                "p": "50five.action",
                "v": "login",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 380,
        "y": 40,
        "wires": [
            [
                "e8f8257ca9ba7d13"
            ]
        ]
    },
    {
        "id": "122a555f7dd485b7",
        "type": "inject",
        "z": "837fdef5c775d406",
        "name": "Start Charging",
        "props": [
            {
                "p": "50five.action",
                "v": "start",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 100,
        "wires": [
            [
                "e8f8257ca9ba7d13"
            ]
        ]
    },
    {
        "id": "fab9bbf22045480f",
        "type": "inject",
        "z": "837fdef5c775d406",
        "name": "Stop Charging",
        "props": [
            {
                "p": "50five.action",
                "v": "stop",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 200,
        "wires": [
            [
                "e8f8257ca9ba7d13"
            ]
        ]
    },
    {
        "id": "51d75f2e75830db1",
        "type": "ha-button",
        "z": "837fdef5c775d406",
        "name": "Start",
        "version": 0,
        "debugenabled": false,
        "outputs": 1,
        "entityConfig": "5107c8f2f1cc0b2a",
        "outputProperties": [
            {
                "property": "50five.action",
                "propertyType": "msg",
                "value": "start",
                "valueType": "str"
            }
        ],
        "x": 90,
        "y": 140,
        "wires": [
            [
                "e8f8257ca9ba7d13"
            ]
        ]
    },
    {
        "id": "41ec569de744ad57",
        "type": "ha-button",
        "z": "837fdef5c775d406",
        "name": "Stop",
        "version": 0,
        "debugenabled": false,
        "outputs": 1,
        "entityConfig": "055cf74b76541104",
        "outputProperties": [
            {
                "property": "50five.action",
                "propertyType": "msg",
                "value": "stop",
                "valueType": "str"
            }
        ],
        "x": 90,
        "y": 240,
        "wires": [
            [
                "e8f8257ca9ba7d13"
            ]
        ]
    },
    {
        "id": "00171015139a8670",
        "type": "inject",
        "z": "837fdef5c775d406",
        "name": "Poll",
        "props": [
            {
                "p": "50five.action",
                "v": "poll",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 300,
        "wires": [
            [
                "e8f8257ca9ba7d13"
            ]
        ]
    },
    {
        "id": "dc15fa7591ef6252",
        "type": "inject",
        "z": "837fdef5c775d406",
        "name": "Reset",
        "props": [
            {
                "p": "50five.action",
                "v": "reset",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 400,
        "wires": [
            [
                "e8f8257ca9ba7d13"
            ]
        ]
    },
    {
        "id": "39d637221fc977c3",
        "type": "ha-entity-config",
        "server": "6b7ca337.48e8fc",
        "deviceConfig": "8b0d0b1b2ee28c9b",
        "name": "Laden",
        "version": 6,
        "entityType": "switch",
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "4852bdbdaf30826e",
        "type": "ha-entity-config",
        "server": "6b7ca337.48e8fc",
        "deviceConfig": "8b0d0b1b2ee28c9b",
        "name": "Reset",
        "version": 6,
        "entityType": "button",
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "23ca43b95da66b78",
        "type": "ha-entity-config",
        "server": "6b7ca337.48e8fc",
        "deviceConfig": "8b0d0b1b2ee28c9b",
        "name": "Poll",
        "version": 6,
        "entityType": "button",
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "7eca8bfdf57ade1d",
        "type": "ha-entity-config",
        "server": "6b7ca337.48e8fc",
        "deviceConfig": "8b0d0b1b2ee28c9b",
        "name": "Laadpaal Status",
        "version": 6,
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            },
            {
                "property": "state_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "5107c8f2f1cc0b2a",
        "type": "ha-entity-config",
        "server": "6b7ca337.48e8fc",
        "deviceConfig": "8b0d0b1b2ee28c9b",
        "name": "Start",
        "version": 6,
        "entityType": "button",
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "055cf74b76541104",
        "type": "ha-entity-config",
        "server": "6b7ca337.48e8fc",
        "deviceConfig": "8b0d0b1b2ee28c9b",
        "name": "Stop",
        "version": 6,
        "entityType": "button",
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "6b7ca337.48e8fc",
        "type": "server",
        "name": "Home Assistant",
        "addon": false,
        "rejectUnauthorizedCerts": false,
        "ha_boolean": "",
        "connectionDelay": false,
        "cacheJson": false,
        "heartbeat": false,
        "heartbeatInterval": "",
        "statusSeparator": "",
        "enableGlobalContextStore": false
    },
    {
        "id": "8b0d0b1b2ee28c9b",
        "type": "ha-device-config",
        "name": "Laadpaal",
        "hwVersion": "",
        "manufacturer": "Node-RED",
        "model": "",
        "swVersion": ""
    }
]