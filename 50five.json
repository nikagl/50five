[
    {
        "id": "afe326f672e3cd97",
        "type": "subflow",
        "name": "50five (subflow)",
        "info": "## About this subflow\n\nThis subflow will control 50five (fka. Shell Recharge or Newmotion) car charging equipment. It's loosly based on the Shell Recharge script from dgthomson.\n\n## Getting started\n\nDrag the 50five node into a flow.\n\nDouble-click on the new node.\n\nUsing the credentials used to login to the 50five website, enter the username and password into the respective fields of the `Edit subflow instance: <xxx>` box which appears.\n\n## Inputs\n\n> msg.payload = { \"action\": \"_ACTION_\" }\n\n...where _ACTION_ is:\n\n**start** and **stop**\n\nStart or stop a charging session.\n\n> msg.payload = { \"action\": \"start\"}\n\n**reset**\n\nReset the charging equipment.\n\n**poll**\n\nPoll the charging equipment once for status information: this gives details directly from 50five like _'Charging'_ and _'Occupied'_. \n\n> msg.payload = { \"action\": \"poll\" }\n\n## Outputs\n\nThe **_Output_** payload contains the status of the charger.\n\n## Contact\n\nvia [Github](https://github.com/nikagl/50five)\n\n## Thanks\n\nThanks to dgthomson for his shell recharge script!! [Github](https://github.com/dgthomson/nodered-shellrecharge)",
        "category": "",
        "in": [
            {
                "x": 20,
                "y": 380,
                "wires": [
                    {
                        "id": "ab42827aa9a16541"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 900,
                "y": 840,
                "wires": [
                    {
                        "id": "ad396f2bbd1d09ee",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "username",
                "type": "str",
                "value": "nobody@hotmail.com",
                "ui": {
                    "icon": "font-awesome/fa-user-circle-o",
                    "label": {
                        "en-US": "Username"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "password",
                "type": "cred",
                "ui": {
                    "icon": "font-awesome/fa-unlock-alt",
                    "label": {
                        "en-US": "Password"
                    }
                }
            },
            {
                "name": "url",
                "type": "str",
                "value": "https://50five-snl.evc-net.com",
                "ui": {
                    "label": {
                        "en-US": "50five URL"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "50five",
            "type": "dgt.nodered.35e.shellrecharge",
            "version": "0.0.3 (2025-07-27)",
            "author": "Nika Gerson Lohman <nikagl@gmail.com>",
            "desc": "Nodered subflow to control 50five charging equipment.",
            "keywords": "shell,recharge,shell recharge,new,motion,newmotion,evse,charge,50five",
            "license": "GPL-3.0"
        },
        "color": "#0097A9",
        "icon": "font-awesome/fa-plug"
    },
    {
        "id": "e4121540cef0577a",
        "type": "http request",
        "z": "afe326f672e3cd97",
        "name": "Start Charging",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 620,
        "y": 680,
        "wires": [
            [
                "1ef4895ee617902f",
                "e212968823cdeec7"
            ]
        ]
    },
    {
        "id": "166efce0dcca4c03",
        "type": "function",
        "z": "afe326f672e3cd97",
        "name": "Build URL Start Charging",
        "func": "var deviceid = flow.get('deviceid') || msg.deviceid;\nvar userid = flow.get('userid') || msg.userid;\nvar cardid = flow.get('cardid') || msg.cardid;\nvar channelid = flow.get('channelid') || msg.channelid;\n\nvar baseUrl = env.get('url');\nmsg.url = baseUrl + '/api/ajax?requests=%7B%220%22%3A%7B%22handler%22%3A%22%5C%5CLMS%5C%5CEV%5C%5CAsyncServices%5C%5CRechargeSpotsAsyncService%22%2C%22method%22%3A%22action%22%2C%22params%22%3A%7B%22action%22%3A%22StartTransaction%22%2C%22rechargeSpotId%22%3A%22' + deviceid + '%22%2C%22clickedButtonId%22%3A0%2C%22channel%22%3A%220%22%2C%22customer%22%3A%22' + userid + '%22%2C%22card%22%3A%22' + cardid + '%22%7D%7D%7D&metricKey=RechargeSpotDashboard_1021';\nmsg.method = \"POST\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 680,
        "wires": [
            [
                "e4121540cef0577a"
            ]
        ]
    },
    {
        "id": "37207b0ef9a04622",
        "type": "function",
        "z": "afe326f672e3cd97",
        "name": "Set Cookies Header",
        "func": "// Get cookies from flow context\nvar phpsessid = flow.get('PHPSESSID');\nvar serverid = flow.get('SERVERID');\nif (phpsessid && serverid) {\n    msg.headers = msg.headers || {};\n    msg.headers['Cookie'] = `PHPSESSID=${phpsessid}; SERVERID=${serverid}`;\n} else {\n    msg.headers = msg.headers || {};\n    msg.headers['Cookie'] = '';\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 460,
        "wires": [
            [
                "5543a7f6021292f4"
            ]
        ]
    },
    {
        "id": "523e092ea25df902",
        "type": "http request",
        "z": "afe326f672e3cd97",
        "name": "Get Device ID",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 820,
        "y": 460,
        "wires": [
            [
                "026400c8cc57db02"
            ]
        ]
    },
    {
        "id": "cd627a81c8fd2344",
        "type": "function",
        "z": "afe326f672e3cd97",
        "name": "Set Cookies Header",
        "func": "// Get cookies from flow context\nvar phpsessid = flow.get('PHPSESSID');\nvar serverid = flow.get('SERVERID');\nif (phpsessid && serverid) {\n    msg.headers = msg.headers || {};\n    msg.headers['Cookie'] = `PHPSESSID=${phpsessid}; SERVERID=${serverid}`;\n} else {\n    msg.headers = msg.headers || {};\n    msg.headers['Cookie'] = '';\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 500,
        "wires": [
            [
                "eefc7e230b8abd86"
            ]
        ]
    },
    {
        "id": "96df4155ded7d3b5",
        "type": "http request",
        "z": "afe326f672e3cd97",
        "name": "Get Channel ID",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 820,
        "y": 500,
        "wires": [
            [
                "9e8ce09005a03634"
            ]
        ]
    },
    {
        "id": "cc31ceaa6768b237",
        "type": "function",
        "z": "afe326f672e3cd97",
        "name": "Set Cookies Header",
        "func": "// Get cookies from flow context\nvar phpsessid = flow.get('PHPSESSID');\nvar serverid = flow.get('SERVERID');\nif (phpsessid && serverid) {\n    msg.headers = msg.headers || {};\n    msg.headers['Cookie'] = `PHPSESSID=${phpsessid}; SERVERID=${serverid}`;\n} else {\n    msg.headers = msg.headers || {};\n    msg.headers['Cookie'] = '';\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 540,
        "wires": [
            [
                "76f26faaa6b12c25"
            ]
        ]
    },
    {
        "id": "34a5d41c70f5ed7f",
        "type": "http request",
        "z": "afe326f672e3cd97",
        "name": "Get User ID",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 540,
        "wires": [
            [
                "2c39c72f658cb7dd"
            ]
        ]
    },
    {
        "id": "dd6f3222e79bcba5",
        "type": "function",
        "z": "afe326f672e3cd97",
        "name": "Set Cookies Header",
        "func": "// Get cookies from flow context\nvar phpsessid = flow.get('PHPSESSID');\nvar serverid = flow.get('SERVERID');\nif (phpsessid && serverid) {\n    msg.headers = msg.headers || {};\n    msg.headers['Cookie'] = `PHPSESSID=${phpsessid}; SERVERID=${serverid}`;\n} else {\n    msg.headers = msg.headers || {};\n    msg.headers['Cookie'] = '';\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 580,
        "wires": [
            [
                "c508ecef01e019d7"
            ]
        ]
    },
    {
        "id": "52dc6d748d6d338d",
        "type": "http request",
        "z": "afe326f672e3cd97",
        "name": "Get Card ID",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 580,
        "wires": [
            [
                "4c4d4bd16599e018"
            ]
        ]
    },
    {
        "id": "1dbd3ab606fed438",
        "type": "function",
        "z": "afe326f672e3cd97",
        "name": "Set Cookies Header",
        "func": "// Get cookies from flow context\nvar phpsessid = flow.get('PHPSESSID');\nvar serverid = flow.get('SERVERID');\nif (phpsessid && serverid) {\n    msg.headers = msg.headers || {};\n    msg.headers['Cookie'] = `PHPSESSID=${phpsessid}; SERVERID=${serverid}`;\n} else {\n    msg.headers = msg.headers || {};\n    msg.headers['Cookie'] = '';\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 620,
        "wires": [
            [
                "fda03362ccda5b6d",
                "e095d5d4bde9b040"
            ]
        ]
    },
    {
        "id": "f88bdcf8eaa8e2ce",
        "type": "http request",
        "z": "afe326f672e3cd97",
        "name": "Stop Charging",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 620,
        "y": 720,
        "wires": [
            [
                "1ef4895ee617902f",
                "651b0c71fc1625b4"
            ]
        ]
    },
    {
        "id": "026400c8cc57db02",
        "type": "function",
        "z": "afe326f672e3cd97",
        "name": "Extract Device ID",
        "func": "var payload = msg.payload;\n\n// If payload is a string, parse it\nif (typeof payload === \"string\") {\n    payload = JSON.parse(payload);\n}\n\nvar deviceid = payload[0][0].IDX;\n\nflow.set('deviceid', deviceid);\nmsg.deviceid = deviceid;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 460,
        "wires": [
            [
                "cd627a81c8fd2344"
            ]
        ]
    },
    {
        "id": "9e8ce09005a03634",
        "type": "function",
        "z": "afe326f672e3cd97",
        "name": "Extract Channel ID",
        "func": "var payload = msg.payload;\n\n// If payload is a string, parse it\nif (typeof payload === \"string\") {\n    payload = JSON.parse(payload);\n}\n\nvar channelid = payload[0][0].CHANNEL;\n\nflow.set('channelid', channelid);\nmsg.channelid = channelid;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 500,
        "wires": [
            [
                "cc31ceaa6768b237"
            ]
        ]
    },
    {
        "id": "2c39c72f658cb7dd",
        "type": "function",
        "z": "afe326f672e3cd97",
        "name": "Extract User ID",
        "func": "var payload = msg.payload;\n\n// If payload is a string, parse it\nif (typeof payload === \"string\") {\n    payload = JSON.parse(payload);\n}\n\nvar userid = payload[0][0].id;\n\nflow.set('userid', userid);\nmsg.userid = userid;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 540,
        "wires": [
            [
                "dd6f3222e79bcba5"
            ]
        ]
    },
    {
        "id": "4c4d4bd16599e018",
        "type": "function",
        "z": "afe326f672e3cd97",
        "name": "Extract Card ID",
        "func": "var payload = msg.payload;\n\n// If payload is a string, parse it\nif (typeof payload === \"string\") {\n    payload = JSON.parse(payload);\n}\n\n// Warning: in my case it's the second card, therefore [1]\nvar cardid = payload[0][1].id;\n\nflow.set('cardid', cardid);\nmsg.cardid = cardid;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 580,
        "wires": [
            [
                "1dbd3ab606fed438"
            ]
        ]
    },
    {
        "id": "3af2fbca19137838",
        "type": "function",
        "z": "afe326f672e3cd97",
        "name": "Build URL Stop Charging",
        "func": "var deviceid = flow.get('deviceid') || msg.deviceid;\nvar userid = flow.get('userid') || msg.userid;\nvar cardid = flow.get('cardid') || msg.cardid;\nvar channelid = flow.get('channelid') || msg.channelid;\n\nvar baseUrl = env.get('url');\nmsg.url = baseUrl + '/api/ajax?requests=%7B%220%22%3A%7B%22handler%22%3A%22%5C%5CLMS%5C%5CEV%5C%5CAsyncServices%5C%5CRechargeSpotsAsyncService%22%2C%22method%22%3A%22action%22%2C%22params%22%3A%7B%22action%22%3A%22StopTransaction%22%2C%22rechargeSpotId%22%3A%22' + deviceid + '%22%2C%22clickedButtonId%22%3A0%2C%22channel%22%3A%22' + channelid + '%22%7D%7D%7D&metricKey=RechargeSpotDashboard_1021';\nmsg.method = \"POST\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 720,
        "wires": [
            [
                "f88bdcf8eaa8e2ce"
            ]
        ]
    },
    {
        "id": "5543a7f6021292f4",
        "type": "switch",
        "z": "afe326f672e3cd97",
        "name": "Check login",
        "property": "headers['Cookie']",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 400,
        "wires": [
            [
                "eeb3b3d597f17754"
            ],
            [
                "48bd18c4860183ee"
            ]
        ]
    },
    {
        "id": "ab42827aa9a16541",
        "type": "switch",
        "z": "afe326f672e3cd97",
        "name": "",
        "property": "50five.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "login",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "start",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "stop",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "reset",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "poll",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "logout",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 65,
        "y": 380,
        "wires": [
            [
                "eeb3b3d597f17754"
            ],
            [
                "99521c93e3a047aa"
            ],
            [
                "ef08cbdc1a8a6edc"
            ],
            [
                "dadaca9b339cf366"
            ],
            [
                "14976606d8bc1752"
            ],
            [
                "64520b122fb39861"
            ]
        ],
        "l": false
    },
    {
        "id": "829677e378046f06",
        "type": "link in",
        "z": "afe326f672e3cd97",
        "name": "Authenticate",
        "links": [],
        "x": 605,
        "y": 20,
        "wires": [
            [
                "e745a599c9efa2a4",
                "de872fa17c1846e7"
            ]
        ]
    },
    {
        "id": "2ca402a99de11343",
        "type": "comment",
        "z": "afe326f672e3cd97",
        "name": "Authenticate",
        "info": "",
        "x": 510,
        "y": 20,
        "wires": []
    },
    {
        "id": "d66c62a69d3727d4",
        "type": "function",
        "z": "afe326f672e3cd97",
        "name": "Login with Retry",
        "func": "var retries = msg.max_retries || 3;\nvar attempt = msg.attempt || 1;\n\nlet username = msg.username || env.get('username');\nlet password = msg.password || env.get('password');\nvar baseUrl = env.get('url');\nmsg.url = baseUrl + '/Login/Login';\nmsg.headers = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n    \"User-Agent\": \"Mozilla/5.0\",\n    \"Referer\": baseUrl + '/Login/Login'\n};\nmsg.method = \"POST\";\nmsg.payload = `emailField=${encodeURIComponent(username)}`;\nmsg.payload += `&passwordField=${encodeURIComponent(password)}`;\nmsg.attempt = attempt;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 100,
        "wires": [
            [
                "f3fcb42d4b45a567"
            ]
        ]
    },
    {
        "id": "f3fcb42d4b45a567",
        "type": "http request",
        "z": "afe326f672e3cd97",
        "name": "POST Login",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 140,
        "wires": [
            [
                "bb7ed68adecb2ca3"
            ]
        ]
    },
    {
        "id": "bb7ed68adecb2ca3",
        "type": "function",
        "z": "afe326f672e3cd97",
        "name": "Check Login Success",
        "func": "// Check for login success by inspecting HTML\nvar cookies = msg.responseCookies || {};\nvar phpsessid = cookies.PHPSESSID ? cookies.PHPSESSID.value : null;\nvar serverid = cookies.SERVERID ? cookies.SERVERID.value : null;\nvar html = msg.payload || '';\n\nmsg.attempt += 1;\n\n// extract dlv_session_user_type and dlv_user_group_name from the results\nvar regex = /_mtm\\.push\\(\\s*{([\\s\\S]*?)}\\s*\\);/g;\nvar match;\nvar found = false;\n\nwhile ((match = regex.exec(html)) !== null) {\n    var objStr = '{' + match[1] + '}';\n    objStr = objStr.replace(/'/g, '\"');\n    objStr = objStr.replace(/,(\\s*[}\\]])/g, '$1');\n    try {\n        var obj = JSON.parse(objStr);\n        if (obj.dlv_session_user_type && obj.dlv_user_group_name) {\n            msg.dlv_session_user_type = obj.dlv_session_user_type;\n            msg.dlv_user_group_name = obj.dlv_user_group_name;\n            found = true;\n            break;\n        }\n    } catch (e) {\n        // Ignore parse errors and continue\n    }\n}\nif (!found) {\n    msg.dlv_session_user_type = null;\n    msg.dlv_user_group_name = null;\n}\n\nif (msg.dlv_session_user_type != 'NotLoggedIn') {\n    if (phpsessid && serverid) {\n        // Success: store cookies\n        flow.set('PHPSESSID', phpsessid);\n        flow.set('SERVERID', serverid);\n        msg.payload = 'Login successful';\n        return [msg, null];\n    } else {\n        msg.errorresult = 'No phpsessid or serverid';\n    }\n} else {\n    msg.errorresult = 'Not Logged In found...';\n}\n\nif (msg.attempt < msg.retries) {\n    // Retry\n    return [null, msg];\n} else {\n    msg.payload = 'Login failed after ' + msg.retries + ' attempts';\n    return [msg, null];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 180,
        "wires": [
            [
                "670f138e65b086f0",
                "464a08a7930a8b25"
            ],
            [
                "055fefc47e2a9965",
                "0deedfe07fbaeab4"
            ]
        ]
    },
    {
        "id": "055fefc47e2a9965",
        "type": "delay",
        "z": "afe326f672e3cd97",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 180,
        "wires": [
            [
                "d66c62a69d3727d4"
            ]
        ]
    },
    {
        "id": "e745a599c9efa2a4",
        "type": "change",
        "z": "afe326f672e3cd97",
        "name": "Get Username and Password + Max Retries",
        "rules": [
            {
                "t": "set",
                "p": "username",
                "pt": "msg",
                "to": "username",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "password",
                "pt": "msg",
                "to": "password",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "max_retries",
                "pt": "msg",
                "to": "3",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 60,
        "wires": [
            [
                "d66c62a69d3727d4"
            ]
        ]
    },
    {
        "id": "ef08cbdc1a8a6edc",
        "type": "link call",
        "z": "afe326f672e3cd97",
        "name": "Get props",
        "links": [
            "76f654c7b3feadba"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 720,
        "wires": [
            [
                "3af2fbca19137838"
            ]
        ]
    },
    {
        "id": "76f654c7b3feadba",
        "type": "link in",
        "z": "afe326f672e3cd97",
        "name": "Get props",
        "links": [],
        "x": 175,
        "y": 460,
        "wires": [
            [
                "37207b0ef9a04622",
                "893bf7714f019f15"
            ]
        ]
    },
    {
        "id": "99521c93e3a047aa",
        "type": "link call",
        "z": "afe326f672e3cd97",
        "name": "Get props",
        "links": [
            "76f654c7b3feadba"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 680,
        "wires": [
            [
                "166efce0dcca4c03"
            ]
        ]
    },
    {
        "id": "0fa54e940c405816",
        "type": "comment",
        "z": "afe326f672e3cd97",
        "name": "Get props",
        "info": "",
        "x": 220,
        "y": 420,
        "wires": []
    },
    {
        "id": "fda03362ccda5b6d",
        "type": "link out",
        "z": "afe326f672e3cd97",
        "name": "link out 1",
        "mode": "return",
        "links": [],
        "x": 495,
        "y": 620,
        "wires": []
    },
    {
        "id": "670f138e65b086f0",
        "type": "link out",
        "z": "afe326f672e3cd97",
        "name": "link out 2",
        "mode": "return",
        "links": [],
        "x": 695,
        "y": 160,
        "wires": []
    },
    {
        "id": "eeb3b3d597f17754",
        "type": "link call",
        "z": "afe326f672e3cd97",
        "name": "",
        "links": [
            "829677e378046f06"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 430,
        "y": 340,
        "wires": [
            [
                "c9278b4cb8e5f69c"
            ]
        ]
    },
    {
        "id": "c9278b4cb8e5f69c",
        "type": "switch",
        "z": "afe326f672e3cd97",
        "name": "",
        "property": "50five.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "login",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "login",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 535,
        "y": 340,
        "wires": [
            [
                "36fbafc84636541a"
            ],
            [
                "89a8ce5f7b440922"
            ]
        ],
        "l": false
    },
    {
        "id": "89a8ce5f7b440922",
        "type": "switch",
        "z": "afe326f672e3cd97",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "Login successful",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Login successful",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 605,
        "y": 340,
        "wires": [
            [
                "aaad9fdb0931a81b"
            ],
            [
                "5543a7f6021292f4",
                "dd94143ffd519d96"
            ]
        ],
        "l": false
    },
    {
        "id": "aaad9fdb0931a81b",
        "type": "debug",
        "z": "afe326f672e3cd97",
        "d": true,
        "name": "Login Failed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 320,
        "wires": []
    },
    {
        "id": "5f3853c9602fa364",
        "type": "http request",
        "z": "afe326f672e3cd97",
        "name": "Soft Reset",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 760,
        "wires": [
            [
                "1ef4895ee617902f",
                "8fa98544d309b480"
            ]
        ]
    },
    {
        "id": "648ab0e8980ef93f",
        "type": "function",
        "z": "afe326f672e3cd97",
        "name": "Build URL Soft Reset",
        "func": "var deviceid = flow.get('deviceid') || msg.deviceid;\nvar userid = flow.get('userid') || msg.userid;\nvar cardid = flow.get('cardid') || msg.cardid;\nvar channelid = flow.get('channelid') || msg.channelid;\n\nvar baseUrl = env.get('url');\nmsg.url = baseUrl + '/api/ajax?requests=%7B%220%22%3A%7B%22handler%22%3A%22%5C%5CLMS%5C%5CEV%5C%5CAsyncServices%5C%5CRechargeSpotsAsyncService%22%2C%22method%22%3A%22action%22%2C%22params%22%3A%7B%22action%22%3A%22SoftReset%22%2C%22rechargeSpotId%22%3A%22' + deviceid + '%22%2C%22clickedButtonId%22%3A1%7D%7D%7D&metricKey=RechargeSpotDashboard_1021';\nmsg.method = \"POST\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 760,
        "wires": [
            [
                "5f3853c9602fa364"
            ]
        ]
    },
    {
        "id": "dadaca9b339cf366",
        "type": "link call",
        "z": "afe326f672e3cd97",
        "name": "Get props",
        "links": [
            "76f654c7b3feadba"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 760,
        "wires": [
            [
                "648ab0e8980ef93f"
            ]
        ]
    },
    {
        "id": "a82901d77cef174c",
        "type": "http request",
        "z": "afe326f672e3cd97",
        "name": "Get Status",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 840,
        "wires": [
            [
                "ad396f2bbd1d09ee"
            ]
        ]
    },
    {
        "id": "01f05d815d3301eb",
        "type": "function",
        "z": "afe326f672e3cd97",
        "name": "Build URL Get Status",
        "func": "var deviceid = flow.get('deviceid') || msg.deviceid;\nvar userid = flow.get('userid') || msg.userid;\nvar cardid = flow.get('cardid') || msg.cardid;\nvar channelid = flow.get('channelid') || msg.channelid;\n\nvar baseUrl = env.get('url');\nmsg.url = baseUrl + '/api/ajax?requests=%7B%220%22%3A%7B%22handler%22%3A%22%5C%5CLMS%5C%5CEV%5C%5CAsyncServices%5C%5CRechargeSpotsAsyncService%22%2C%22method%22%3A%22overview%22%2C%22params%22%3A%7B%22rechargeSpotId%22%3A%22' + deviceid + '%22%7D%7D%7D&metricKey=RechargeSpotDashboard_149';\nmsg.method = \"POST\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 840,
        "wires": [
            [
                "a82901d77cef174c"
            ]
        ]
    },
    {
        "id": "14976606d8bc1752",
        "type": "link call",
        "z": "afe326f672e3cd97",
        "name": "Get props",
        "links": [
            "76f654c7b3feadba"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 840,
        "wires": [
            [
                "01f05d815d3301eb"
            ]
        ]
    },
    {
        "id": "ad396f2bbd1d09ee",
        "type": "function",
        "z": "afe326f672e3cd97",
        "name": "Extract Status",
        "func": "var payload = msg.payload;\n\n// If payload is a string, parse it\nif (typeof payload === \"string\") {\n    payload = JSON.parse(payload);\n}\n\nvar status = payload[0][0].NOTIFICATION;\nmsg.status = status;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 840,
        "wires": [
            [
                "d149e3c954175a26"
            ]
        ]
    },
    {
        "id": "1ef4895ee617902f",
        "type": "delay",
        "z": "afe326f672e3cd97",
        "name": "",
        "pauseType": "delay",
        "timeout": "7",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 840,
        "y": 760,
        "wires": [
            [
                "14976606d8bc1752"
            ]
        ]
    },
    {
        "id": "48bd18c4860183ee",
        "type": "function",
        "z": "afe326f672e3cd97",
        "name": "Build URL Device ID",
        "func": "var deviceid = flow.get('deviceid') || msg.deviceid;\nvar userid = flow.get('userid') || msg.userid;\nvar cardid = flow.get('cardid') || msg.cardid;\nvar channelid = flow.get('channelid') || msg.channelid;\n\nvar baseUrl = env.get('url');\nmsg.url = baseUrl + '/api/ajax?requests=%7B%220%22%3A%7B%22handler%22%3A%22%5C%5CLMS%5C%5CEV%5C%5CAsyncServices%5C%5CDashboardAsyncService%22%2C%22method%22%3A%22networkOverview%22%2C%22params%22%3A%7B%22mode%22%3A%22id%22%7D%7D%7D&metricKey=EndUserRechargeSpotListView_99';\nmsg.method = \"POST\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 460,
        "wires": [
            [
                "523e092ea25df902"
            ]
        ]
    },
    {
        "id": "eefc7e230b8abd86",
        "type": "function",
        "z": "afe326f672e3cd97",
        "name": "Build URL Channel ID",
        "func": "var deviceid = flow.get('deviceid') || msg.deviceid;\nvar userid = flow.get('userid') || msg.userid;\nvar cardid = flow.get('cardid') || msg.cardid;\nvar channelid = flow.get('channelid') || msg.channelid;\n\nvar baseUrl = env.get('url');\nmsg.url = baseUrl + '/api/ajax?requests=%7B%220%22%3A%7B%22handler%22%3A%22%5C%5CLMS%5C%5CEV%5C%5CAsyncServices%5C%5CRechargeSpotsAsyncService%22%2C%22method%22%3A%22overview%22%2C%22params%22%3A%7B%22rechargeSpotId%22%3A%22' + deviceid + '%22%7D%7D%7D&metricKey=RechargeSpotDashboard_149';\nmsg.method = \"POST\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 500,
        "wires": [
            [
                "96df4155ded7d3b5"
            ]
        ]
    },
    {
        "id": "76f26faaa6b12c25",
        "type": "function",
        "z": "afe326f672e3cd97",
        "name": "Build URL User ID",
        "func": "var deviceid = flow.get('deviceid') || msg.deviceid;\nvar userid = flow.get('userid') || msg.userid;\nvar cardid = flow.get('cardid') || msg.cardid;\nvar channelid = flow.get('channelid') || msg.channelid;\n\nvar baseUrl = env.get('url');\nmsg.url = baseUrl + '/api/ajax?requests=%7B%220%22%3A%7B%22handler%22%3A%22%5C%5CLMS%5C%5CEV%5C%5CAsyncServices%5C%5CRechargeSpotsAsyncService%22%2C%22method%22%3A%22userAccess%22%2C%22params%22%3A%7B%22rechargeSpotId%22%3A%22' + deviceid + '%22%2C%22input%22%3A%22%22%7D%7D%7D&metricKey=RechargeSpotDashboard_642';\nmsg.method = \"POST\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 540,
        "wires": [
            [
                "34a5d41c70f5ed7f"
            ]
        ]
    },
    {
        "id": "c508ecef01e019d7",
        "type": "function",
        "z": "afe326f672e3cd97",
        "name": "Build URL Card ID",
        "func": "var deviceid = flow.get('deviceid') || msg.deviceid;\nvar userid = flow.get('userid') || msg.userid;\nvar cardid = flow.get('cardid') || msg.cardid;\nvar channelid = flow.get('channelid') || msg.channelid;\n\nvar baseUrl = env.get('url');\nmsg.url = baseUrl + '/api/ajax?requests=%7B%220%22%3A%7B%22handler%22%3A%22%5C%5CLMS%5C%5CEV%5C%5CAsyncServices%5C%5CRechargeSpotsAsyncService%22%2C%22method%22%3A%22cardAccess%22%2C%22params%22%3A%7B%22rechargeSpotId%22%3A%22' + deviceid + '%22%2C%22customerId%22%3A%22' + userid + '%22%7D%7D%7D&metricKey=RechargeSpotDashboard_688';\nmsg.method = \"POST\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 580,
        "wires": [
            [
                "52dc6d748d6d338d"
            ]
        ]
    },
    {
        "id": "64520b122fb39861",
        "type": "function",
        "z": "afe326f672e3cd97",
        "name": "Logout",
        "func": "flow.set('PHPSESSID', '');\nflow.set('SERVERID', '');\n\nmsg.payload = \"Done...\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 920,
        "wires": [
            [
                "48d5a61c52da6f54"
            ]
        ]
    },
    {
        "id": "48d5a61c52da6f54",
        "type": "debug",
        "z": "afe326f672e3cd97",
        "d": true,
        "name": "Logged out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 920,
        "wires": []
    },
    {
        "id": "de872fa17c1846e7",
        "type": "debug",
        "z": "afe326f672e3cd97",
        "d": true,
        "name": "Auth Begin",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 20,
        "wires": []
    },
    {
        "id": "464a08a7930a8b25",
        "type": "debug",
        "z": "afe326f672e3cd97",
        "d": true,
        "name": "Auth Done",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 120,
        "wires": []
    },
    {
        "id": "0deedfe07fbaeab4",
        "type": "debug",
        "z": "afe326f672e3cd97",
        "d": true,
        "name": "Auth Retry",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 200,
        "wires": []
    },
    {
        "id": "893bf7714f019f15",
        "type": "debug",
        "z": "afe326f672e3cd97",
        "d": true,
        "name": "Props Begin",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 230,
        "y": 380,
        "wires": []
    },
    {
        "id": "e095d5d4bde9b040",
        "type": "debug",
        "z": "afe326f672e3cd97",
        "d": true,
        "name": "Props Done",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 620,
        "wires": []
    },
    {
        "id": "dd94143ffd519d96",
        "type": "debug",
        "z": "afe326f672e3cd97",
        "d": true,
        "name": "Login Success",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 360,
        "wires": []
    },
    {
        "id": "36fbafc84636541a",
        "type": "debug",
        "z": "afe326f672e3cd97",
        "d": true,
        "name": "Manual Login",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 280,
        "wires": []
    },
    {
        "id": "e212968823cdeec7",
        "type": "debug",
        "z": "afe326f672e3cd97",
        "d": true,
        "name": "Charging Started",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 680,
        "wires": []
    },
    {
        "id": "651b0c71fc1625b4",
        "type": "debug",
        "z": "afe326f672e3cd97",
        "d": true,
        "name": "Charging Stopped",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 720,
        "wires": []
    },
    {
        "id": "8fa98544d309b480",
        "type": "debug",
        "z": "afe326f672e3cd97",
        "d": true,
        "name": "Reset Done",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 760,
        "wires": []
    },
    {
        "id": "d149e3c954175a26",
        "type": "debug",
        "z": "afe326f672e3cd97",
        "d": true,
        "name": "Status Received",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 840,
        "wires": []
    },
    {
        "id": "7801bca7eb84dbaf",
        "type": "tab",
        "label": "50five",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "87718d84e1c7eec3",
        "type": "ha-switch",
        "z": "7801bca7eb84dbaf",
        "name": "Laden",
        "version": 0,
        "debugenabled": false,
        "inputs": 0,
        "outputs": 2,
        "entityConfig": "39d637221fc977c3",
        "enableInput": false,
        "outputOnStateChange": true,
        "outputProperties": [
            {
                "property": "50five.action",
                "propertyType": "msg",
                "value": "poll",
                "valueType": "str"
            }
        ],
        "x": 90,
        "y": 580,
        "wires": [
            [
                "fccfd7e373f2a50f"
            ],
            [
                "fccfd7e373f2a50f"
            ]
        ]
    },
    {
        "id": "649b5c633afde8ec",
        "type": "ha-button",
        "z": "7801bca7eb84dbaf",
        "name": "Reset",
        "version": 0,
        "debugenabled": false,
        "outputs": 1,
        "entityConfig": "4852bdbdaf30826e",
        "outputProperties": [
            {
                "property": "50five.action",
                "propertyType": "msg",
                "value": "reset",
                "valueType": "str"
            }
        ],
        "x": 90,
        "y": 700,
        "wires": [
            [
                "fccfd7e373f2a50f"
            ]
        ]
    },
    {
        "id": "a92a6a6663803fdf",
        "type": "ha-button",
        "z": "7801bca7eb84dbaf",
        "name": "Poll",
        "version": 0,
        "debugenabled": false,
        "outputs": 1,
        "entityConfig": "23ca43b95da66b78",
        "outputProperties": [
            {
                "property": "50five.action",
                "propertyType": "msg",
                "value": "poll",
                "valueType": "str"
            }
        ],
        "x": 90,
        "y": 520,
        "wires": [
            [
                "fccfd7e373f2a50f"
            ]
        ]
    },
    {
        "id": "b288b09dcea610fd",
        "type": "ha-sensor",
        "z": "7801bca7eb84dbaf",
        "name": "Laadpaal Status",
        "entityConfig": "7eca8bfdf57ade1d",
        "version": 0,
        "state": "msg.status & ' ' & $now('[H#1]:[m01]','+0200')",
        "stateType": "jsonata",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 820,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "fb419651251e9150",
        "type": "inject",
        "z": "7801bca7eb84dbaf",
        "name": "Login",
        "props": [
            {
                "p": "50five.action",
                "v": "login",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 370,
        "y": 40,
        "wires": [
            [
                "fccfd7e373f2a50f"
            ]
        ]
    },
    {
        "id": "c1e482c447619238",
        "type": "inject",
        "z": "7801bca7eb84dbaf",
        "name": "Start Charging",
        "props": [
            {
                "p": "50five.action",
                "v": "start",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "fccfd7e373f2a50f"
            ]
        ]
    },
    {
        "id": "0e68820a56fb8fc9",
        "type": "inject",
        "z": "7801bca7eb84dbaf",
        "name": "Stop Charging",
        "props": [
            {
                "p": "50five.action",
                "v": "stop",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 360,
        "wires": [
            [
                "fccfd7e373f2a50f"
            ]
        ]
    },
    {
        "id": "3000534bd18e927c",
        "type": "ha-button",
        "z": "7801bca7eb84dbaf",
        "name": "Start",
        "version": 0,
        "debugenabled": false,
        "outputs": 1,
        "entityConfig": "5107c8f2f1cc0b2a",
        "outputProperties": [
            {
                "property": "50five.action",
                "propertyType": "msg",
                "value": "start",
                "valueType": "str"
            }
        ],
        "x": 90,
        "y": 280,
        "wires": [
            [
                "fccfd7e373f2a50f"
            ]
        ]
    },
    {
        "id": "f6064af97d0431f4",
        "type": "ha-button",
        "z": "7801bca7eb84dbaf",
        "name": "Stop",
        "version": 0,
        "debugenabled": false,
        "outputs": 1,
        "entityConfig": "055cf74b76541104",
        "outputProperties": [
            {
                "property": "50five.action",
                "propertyType": "msg",
                "value": "stop",
                "valueType": "str"
            }
        ],
        "x": 90,
        "y": 400,
        "wires": [
            [
                "fccfd7e373f2a50f"
            ]
        ]
    },
    {
        "id": "90a2401d152fa35f",
        "type": "inject",
        "z": "7801bca7eb84dbaf",
        "name": "Poll",
        "props": [
            {
                "p": "50five.action",
                "v": "poll",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 480,
        "wires": [
            [
                "fccfd7e373f2a50f"
            ]
        ]
    },
    {
        "id": "a3770db499d96007",
        "type": "inject",
        "z": "7801bca7eb84dbaf",
        "name": "Reset",
        "props": [
            {
                "p": "50five.action",
                "v": "reset",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 660,
        "wires": [
            [
                "fccfd7e373f2a50f"
            ]
        ]
    },
    {
        "id": "f697e22eb9f3d098",
        "type": "inject",
        "z": "7801bca7eb84dbaf",
        "name": "Logout",
        "props": [
            {
                "p": "50five.action",
                "v": "logout",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 370,
        "y": 80,
        "wires": [
            [
                "fccfd7e373f2a50f"
            ]
        ]
    },
    {
        "id": "6ac6eea04cf98b95",
        "type": "mqtt out",
        "z": "7801bca7eb84dbaf",
        "name": "MQTT Output",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "91e30fc5ccf91f78",
        "x": 960,
        "y": 180,
        "wires": []
    },
    {
        "id": "6dab1089e1b0cb2d",
        "type": "change",
        "z": "7801bca7eb84dbaf",
        "name": "Set topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "50five/status",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "status",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 180,
        "wires": [
            [
                "6ac6eea04cf98b95"
            ]
        ]
    },
    {
        "id": "382121f46e1842a5",
        "type": "mqtt in",
        "z": "7801bca7eb84dbaf",
        "name": "MQTT Action",
        "topic": "50five/action",
        "qos": "0",
        "datatype": "utf8",
        "broker": "91e30fc5ccf91f78",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 180,
        "wires": [
            [
                "aae1a1a38b69351f"
            ]
        ]
    },
    {
        "id": "aae1a1a38b69351f",
        "type": "change",
        "z": "7801bca7eb84dbaf",
        "name": "Set payload",
        "rules": [
            {
                "t": "set",
                "p": "50five.action",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 180,
        "wires": [
            [
                "fccfd7e373f2a50f"
            ]
        ]
    },
    {
        "id": "fccfd7e373f2a50f",
        "type": "subflow:afe326f672e3cd97",
        "z": "7801bca7eb84dbaf",
        "name": "50five (subflow)",
        "env": [
            {
                "name": "username",
                "value": "nobody@gmail.com",
                "type": "str"
            },
            {
                "name": "password",
                "type": "cred"
            }
        ],
        "x": 580,
        "y": 240,
        "wires": [
            [
                "b288b09dcea610fd",
                "6dab1089e1b0cb2d"
            ]
        ]
    },
    {
        "id": "39d637221fc977c3",
        "type": "ha-entity-config",
        "server": "6b7ca337.48e8fc",
        "deviceConfig": "8b0d0b1b2ee28c9b",
        "name": "Laden",
        "version": 6,
        "entityType": "switch",
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "4852bdbdaf30826e",
        "type": "ha-entity-config",
        "server": "6b7ca337.48e8fc",
        "deviceConfig": "8b0d0b1b2ee28c9b",
        "name": "Reset",
        "version": 6,
        "entityType": "button",
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "23ca43b95da66b78",
        "type": "ha-entity-config",
        "server": "6b7ca337.48e8fc",
        "deviceConfig": "8b0d0b1b2ee28c9b",
        "name": "Poll",
        "version": 6,
        "entityType": "button",
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "7eca8bfdf57ade1d",
        "type": "ha-entity-config",
        "server": "6b7ca337.48e8fc",
        "deviceConfig": "8b0d0b1b2ee28c9b",
        "name": "Laadpaal Status",
        "version": 6,
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            },
            {
                "property": "state_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "5107c8f2f1cc0b2a",
        "type": "ha-entity-config",
        "server": "6b7ca337.48e8fc",
        "deviceConfig": "8b0d0b1b2ee28c9b",
        "name": "Start",
        "version": 6,
        "entityType": "button",
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "055cf74b76541104",
        "type": "ha-entity-config",
        "server": "6b7ca337.48e8fc",
        "deviceConfig": "8b0d0b1b2ee28c9b",
        "name": "Stop",
        "version": 6,
        "entityType": "button",
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "91e30fc5ccf91f78",
        "type": "mqtt-broker",
        "name": "",
        "broker": "core-mosquitto",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "6b7ca337.48e8fc",
        "type": "server",
        "name": "Home Assistant",
        "addon": false,
        "rejectUnauthorizedCerts": false,
        "ha_boolean": "",
        "connectionDelay": false,
        "cacheJson": false,
        "heartbeat": false,
        "heartbeatInterval": "",
        "statusSeparator": "",
        "enableGlobalContextStore": false
    },
    {
        "id": "8b0d0b1b2ee28c9b",
        "type": "ha-device-config",
        "name": "Laadpaal",
        "hwVersion": "",
        "manufacturer": "Node-RED",
        "model": "",
        "swVersion": ""
    }
]